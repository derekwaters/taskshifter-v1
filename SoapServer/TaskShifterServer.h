// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* TaskShifterServer.h
   Generated by wsdl2h 2.8.3 from http://localhost/ts/?wsdl and typemap.dat
   2011-08-04 11:31:50 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on TaskShifterServer.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://localhost/ts/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://localhost/ts/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://localhost/ts/"
//gsoap ns1   schema namespace:	http://localhost/ts/
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://localhost/ts/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://localhost/ts/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://localhost/ts/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://localhost/ts/                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	TSServerBinding 
//gsoap ns1  service type:	TSServerPort 
//gsoap ns1  service port:	http://localhost/ts/ 
//gsoap ns1  service namespace:	http://localhost/ts/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage TSServer Definitions

@section TSServer_bindings Service Bindings

  - @ref TSServerBinding

@section TSServer_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page TSServerBinding Binding "TSServerBinding"

@section TSServerBinding_operations Operations of Binding  "TSServerBinding"

  - @ref ns1__Connect

  - @ref ns1__GetUserTasks

  - @ref ns1__GetPolicy

  - @ref ns1__AddTask

  - @ref ns1__SubmitTimesheet

@section TSServerBinding_ports Endpoints of Binding  "TSServerBinding"

  - http://localhost/ts/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   TSServerBinding                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__Connect                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__Connect" of service binding "TSServerBinding"

/**

Operation details:

Connect: This method connects to the TaskShifter server
and checks the supplied username. The user's list of approved
tasks is returned. If the user is new, they will be assigned
the default task group's tasks.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="http://localhost/ts/#Connect"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__Connect(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    std::string                         userName,
    std::string                         machineName,
    int                                 userType,
    // response parameters:
    int                                &return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__Connect(
    struct soap *soap,
    // request parameters:
    std::string                         userName,
    std::string                         machineName,
    int                                 userType,
    // response parameters:
    int                                &return_
  );
@endcode

C++ proxy class (defined in soapTSServerBindingProxy.h):
@code
  class TSServerBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTSServerBindingService.h):
@code
  class TSServerBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	Connect rpc
//gsoap ns1  service method-encoding:	Connect http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	Connect http://localhost/ts/#Connect
int ns1__Connect(
    std::string                         userName,	///< Request parameter
    std::string                         machineName,	///< Request parameter
    int                                 userType,	///< Request parameter
    int                                &return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetUserTasks                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GetUserTasks" of service binding "TSServerBinding"

/**

Operation details:

GetUserTasks: This method connects to the TaskShifter server
and retrieves the tasks for the given user id.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="http://localhost/ts/#GetUserTasks"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetUserTasks(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 userId,
    // response parameters:
    struct { _XML *__ptr; int __size; }&return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetUserTasks(
    struct soap *soap,
    // request parameters:
    int                                 userId,
    // response parameters:
    struct { _XML *__ptr; int __size; }&return_
  );
@endcode

C++ proxy class (defined in soapTSServerBindingProxy.h):
@code
  class TSServerBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTSServerBindingService.h):
@code
  class TSServerBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetUserTasks rpc
//gsoap ns1  service method-encoding:	GetUserTasks http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetUserTasks http://localhost/ts/#GetUserTasks
int ns1__GetUserTasks(
    int                                 userId,	///< Request parameter
    struct { _XML *__ptr; int __size; }&return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__GetPolicy                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__GetPolicy" of service binding "TSServerBinding"

/**

Operation details:

GetPolicy: This method returns an array of the current
system policies. Currently, this include "user_can_add_tasks"
and "auto_submit_timesheet".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="http://localhost/ts/#GetPolicy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__GetPolicy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    // response parameters:
    struct { _XML *__ptr; int __size; }&return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__GetPolicy(
    struct soap *soap,
    // request parameters:
    // response parameters:
    struct { _XML *__ptr; int __size; }&return_
  );
@endcode

C++ proxy class (defined in soapTSServerBindingProxy.h):
@code
  class TSServerBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTSServerBindingService.h):
@code
  class TSServerBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetPolicy rpc
//gsoap ns1  service method-encoding:	GetPolicy http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	GetPolicy http://localhost/ts/#GetPolicy
int ns1__GetPolicy(
    struct { _XML *__ptr; int __size; }&return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__AddTask                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__AddTask" of service binding "TSServerBinding"

/**

Operation details:

AddTask: This method adds a user's custom task. Using the
admin interface, this can eventually be made into a real
task, or rejected.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="http://localhost/ts/#AddTask"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__AddTask(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 userId,
    std::string                         taskName,
    // response parameters:
    int                                &return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__AddTask(
    struct soap *soap,
    // request parameters:
    int                                 userId,
    std::string                         taskName,
    // response parameters:
    int                                &return_
  );
@endcode

C++ proxy class (defined in soapTSServerBindingProxy.h):
@code
  class TSServerBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTSServerBindingService.h):
@code
  class TSServerBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	AddTask rpc
//gsoap ns1  service method-encoding:	AddTask http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	AddTask http://localhost/ts/#AddTask
int ns1__AddTask(
    int                                 userId,	///< Request parameter
    std::string                         taskName,	///< Request parameter
    int                                &return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   ns1__SubmitTimesheet                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "ns1__SubmitTimesheet" of service binding "TSServerBinding"

/**

Operation details:

SubmitTimesheet: This method submits a timesheet, delivered
as an XML document of timesheet records, including task id, start time
and end time.

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - SOAP action="http://localhost/ts/#SubmitTimesheet"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_ns1__SubmitTimesheet(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    int                                 userId,
    std::string                         timeSheetItemsXml,
    // response parameters:
    int                                &return_
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int ns1__SubmitTimesheet(
    struct soap *soap,
    // request parameters:
    int                                 userId,
    std::string                         timeSheetItemsXml,
    // response parameters:
    int                                &return_
  );
@endcode

C++ proxy class (defined in soapTSServerBindingProxy.h):
@code
  class TSServerBindingProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapTSServerBindingService.h):
@code
  class TSServerBindingService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SubmitTimesheet rpc
//gsoap ns1  service method-encoding:	SubmitTimesheet http://schemas.xmlsoap.org/soap/encoding/
//gsoap ns1  service method-action:	SubmitTimesheet http://localhost/ts/#SubmitTimesheet
int ns1__SubmitTimesheet(
    int                                 userId,	///< Request parameter
    std::string                         timeSheetItemsXml,	///< Request parameter
    int                                &return_	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://localhost/ts/"

*/

/* End of TaskShifterServer.h */
