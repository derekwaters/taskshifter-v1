/* soapTSServerBindingProxy.cpp
   Generated by gSOAP 2.8.3 from f:\Programming\Projects\TaskShifter\SoapServer\TaskShifterServer.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapTSServerBindingProxy.h"

TSServerBindingProxy::TSServerBindingProxy()
{	TSServerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TSServerBindingProxy::TSServerBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

TSServerBindingProxy::TSServerBindingProxy(const char *url)
{	TSServerBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

TSServerBindingProxy::TSServerBindingProxy(soap_mode iomode)
{	TSServerBindingProxy_init(iomode, iomode);
}

TSServerBindingProxy::TSServerBindingProxy(const char *url, soap_mode iomode)
{	TSServerBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

TSServerBindingProxy::TSServerBindingProxy(soap_mode imode, soap_mode omode)
{	TSServerBindingProxy_init(imode, omode);
}

TSServerBindingProxy::~TSServerBindingProxy()
{ }

void TSServerBindingProxy::TSServerBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://localhost/ts/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void TSServerBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void TSServerBindingProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *TSServerBindingProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *TSServerBindingProxy::soap_fault()
{	return this->fault;
}

const char *TSServerBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *TSServerBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int TSServerBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

void TSServerBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void TSServerBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *TSServerBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int TSServerBindingProxy::Connect(const char *endpoint, const char *soap_action, std::string userName, std::string machineName, int userType, int &return_)
{	struct soap *soap = this;
	struct ns1__Connect soap_tmp_ns1__Connect;
	struct ns1__ConnectResponse *soap_tmp_ns1__ConnectResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/ts/";
	if (!soap_action)
		soap_action = "http://localhost/ts/#Connect";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__Connect.userName = userName;
	soap_tmp_ns1__Connect.machineName = machineName;
	soap_tmp_ns1__Connect.userType = userType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__Connect(soap, &soap_tmp_ns1__Connect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__Connect(soap, &soap_tmp_ns1__Connect, "ns1:Connect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__Connect(soap, &soap_tmp_ns1__Connect, "ns1:Connect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	soap_default_int(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__ConnectResponse = soap_get_ns1__ConnectResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__ConnectResponse->return_;
	return soap_closesock(soap);
}

int TSServerBindingProxy::GetUserTasks(const char *endpoint, const char *soap_action, int userId, struct _Struct_1 &return_)
{	struct soap *soap = this;
	struct ns1__GetUserTasks soap_tmp_ns1__GetUserTasks;
	struct ns1__GetUserTasksResponse *soap_tmp_ns1__GetUserTasksResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/ts/";
	if (!soap_action)
		soap_action = "http://localhost/ts/#GetUserTasks";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__GetUserTasks.userId = userId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetUserTasks(soap, &soap_tmp_ns1__GetUserTasks);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetUserTasks(soap, &soap_tmp_ns1__GetUserTasks, "ns1:GetUserTasks", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetUserTasks(soap, &soap_tmp_ns1__GetUserTasks, "ns1:GetUserTasks", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	soap_default__Struct_1(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetUserTasksResponse = soap_get_ns1__GetUserTasksResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__GetUserTasksResponse->return_;
	return soap_closesock(soap);
}

int TSServerBindingProxy::GetPolicy(const char *endpoint, const char *soap_action, struct _Struct_2 &return_)
{	struct soap *soap = this;
	struct ns1__GetPolicy soap_tmp_ns1__GetPolicy;
	struct ns1__GetPolicyResponse *soap_tmp_ns1__GetPolicyResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/ts/";
	if (!soap_action)
		soap_action = "http://localhost/ts/#GetPolicy";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__GetPolicy(soap, &soap_tmp_ns1__GetPolicy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__GetPolicy(soap, &soap_tmp_ns1__GetPolicy, "ns1:GetPolicy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__GetPolicy(soap, &soap_tmp_ns1__GetPolicy, "ns1:GetPolicy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	soap_default__Struct_2(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__GetPolicyResponse = soap_get_ns1__GetPolicyResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__GetPolicyResponse->return_;
	return soap_closesock(soap);
}

int TSServerBindingProxy::AddTask(const char *endpoint, const char *soap_action, int userId, std::string taskName, int &return_)
{	struct soap *soap = this;
	struct ns1__AddTask soap_tmp_ns1__AddTask;
	struct ns1__AddTaskResponse *soap_tmp_ns1__AddTaskResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/ts/";
	if (!soap_action)
		soap_action = "http://localhost/ts/#AddTask";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__AddTask.userId = userId;
	soap_tmp_ns1__AddTask.taskName = taskName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__AddTask(soap, &soap_tmp_ns1__AddTask);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__AddTask(soap, &soap_tmp_ns1__AddTask, "ns1:AddTask", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__AddTask(soap, &soap_tmp_ns1__AddTask, "ns1:AddTask", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	soap_default_int(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__AddTaskResponse = soap_get_ns1__AddTaskResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__AddTaskResponse->return_;
	return soap_closesock(soap);
}

int TSServerBindingProxy::SubmitTimesheet(const char *endpoint, const char *soap_action, int userId, std::string timeSheetItemsXml, int &return_)
{	struct soap *soap = this;
	struct ns1__SubmitTimesheet soap_tmp_ns1__SubmitTimesheet;
	struct ns1__SubmitTimesheetResponse *soap_tmp_ns1__SubmitTimesheetResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost/ts/";
	if (!soap_action)
		soap_action = "http://localhost/ts/#SubmitTimesheet";
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__SubmitTimesheet.userId = userId;
	soap_tmp_ns1__SubmitTimesheet.timeSheetItemsXml = timeSheetItemsXml;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__SubmitTimesheet(soap, &soap_tmp_ns1__SubmitTimesheet);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__SubmitTimesheet(soap, &soap_tmp_ns1__SubmitTimesheet, "ns1:SubmitTimesheet", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__SubmitTimesheet(soap, &soap_tmp_ns1__SubmitTimesheet, "ns1:SubmitTimesheet", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&return_)
		return soap_closesock(soap);
	soap_default_int(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__SubmitTimesheetResponse = soap_get_ns1__SubmitTimesheetResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns1__SubmitTimesheetResponse->return_;
	return soap_closesock(soap);
}
/* End of client proxy code */
