/* soapStub.h
   Generated by gSOAP 2.8.3 from f:\Programming\Projects\TaskShifter\SoapServer\TaskShifterServer.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://localhost/ts/"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__ConnectResponse
#define SOAP_TYPE_ns1__ConnectResponse (11)
/* ns1:ConnectResponse */
struct ns1__ConnectResponse
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns1__Connect
#define SOAP_TYPE_ns1__Connect (12)
/* ns1:Connect */
struct ns1__Connect
{
public:
	std::string userName;	/* required element of type xsd:string */
	std::string machineName;	/* required element of type xsd:string */
	int userType;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE__Struct_1
#define SOAP_TYPE__Struct_1 (14)
/* Sequence of xsd:anyType schema type: */
struct _Struct_1
{
public:
	char **__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserTasksResponse
#define SOAP_TYPE_ns1__GetUserTasksResponse (17)
/* ns1:GetUserTasksResponse */
struct ns1__GetUserTasksResponse
{
public:
	struct _Struct_1 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type Struct-1 */
};
#endif

#ifndef SOAP_TYPE_ns1__GetUserTasks
#define SOAP_TYPE_ns1__GetUserTasks (18)
/* ns1:GetUserTasks */
struct ns1__GetUserTasks
{
public:
	int userId;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE__Struct_2
#define SOAP_TYPE__Struct_2 (19)
/* Sequence of xsd:anyType schema type: */
struct _Struct_2
{
public:
	char **__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_ns1__GetPolicyResponse
#define SOAP_TYPE_ns1__GetPolicyResponse (22)
/* ns1:GetPolicyResponse */
struct ns1__GetPolicyResponse
{
public:
	struct _Struct_2 return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type Struct-2 */
};
#endif

#ifndef SOAP_TYPE_ns1__GetPolicy
#define SOAP_TYPE_ns1__GetPolicy (23)
/* ns1:GetPolicy */
struct ns1__GetPolicy
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns1__AddTaskResponse
#define SOAP_TYPE_ns1__AddTaskResponse (25)
/* ns1:AddTaskResponse */
struct ns1__AddTaskResponse
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns1__AddTask
#define SOAP_TYPE_ns1__AddTask (26)
/* ns1:AddTask */
struct ns1__AddTask
{
public:
	int userId;	/* required element of type xsd:int */
	std::string taskName;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns1__SubmitTimesheetResponse
#define SOAP_TYPE_ns1__SubmitTimesheetResponse (28)
/* ns1:SubmitTimesheetResponse */
struct ns1__SubmitTimesheetResponse
{
public:
	int return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns1__SubmitTimesheet
#define SOAP_TYPE_ns1__SubmitTimesheet (29)
/* ns1:SubmitTimesheet */
struct ns1__SubmitTimesheet
{
public:
	int userId;	/* required element of type xsd:int */
	std::string timeSheetItemsXml;	/* required element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (30)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (31)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (33)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (36)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (37)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
